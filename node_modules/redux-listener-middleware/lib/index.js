"use strict";

function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

module.exports = function () {
  _newArrowCheck(undefined, undefined);

  var listeners = [];

  var middleware = function (_ref) {
    var getState = _ref.getState;
    var dispatch = _ref.dispatch;

    _newArrowCheck(undefined, undefined);

    return function (next) {
      _newArrowCheck(undefined, undefined);

      return function (action) {
        _newArrowCheck(undefined, undefined);

        if (action.type) {
          listeners.forEach(function (listener) {
            _newArrowCheck(undefined, undefined);

            return listener.rules.forEach(function (rule) {
              _newArrowCheck(undefined, undefined);

              if (rule.matcher instanceof RegExp && action.type.match(rule.matcher) || action.type === rule.matcher) {
                var modifiedAction = rule.modifier(Object.assign({}, action));
                listener.runner(modifiedAction, dispatch);
              }
            }.bind(undefined));
          }.bind(undefined));
        }
        return next(action);
      }.bind(undefined);
    }.bind(undefined);
  }.bind(undefined);

  middleware.createListener = function (runner) {
    _newArrowCheck(undefined, undefined);

    var listener = {
      runner: runner,
      rules: []
    };
    listeners.push(listener);

    var addRule = function (matcher) {
      var modifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (action) {
        _newArrowCheck(undefined, undefined);

        return action;
      }.bind(undefined);

      _newArrowCheck(undefined, undefined);

      listener.rules.push({ matcher: matcher, modifier: modifier });
      return { addRule: addRule, addRules: addRules };
    }.bind(undefined);
    var addRules = function (rules) {
      _newArrowCheck(undefined, undefined);

      rules.map(function (rule) {
        _newArrowCheck(undefined, undefined);

        return addRule(rule[0], rule[1]);
      }.bind(undefined));
      return { addRule: addRule, addRules: addRules };
    }.bind(undefined);

    return { addRule: addRule, addRules: addRules };
  }.bind(undefined);

  return middleware;
}.bind(undefined);