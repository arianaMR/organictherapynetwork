"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _reduxForm = require("redux-form");

var _v = _interopRequireDefault(require("uuid/v4"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _jquery = _interopRequireDefault(require("jquery"));

var _AsteriskText = _interopRequireDefault(require("../AsteriskText"));

var _ErrorSvg = _interopRequireDefault(require("../../assets/components/ErrorSvg"));

var _InputCommon = require("./InputCommon");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  font-weight: 600;\n  background-color: ", ";\n  color: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

var StyledButton = (0, _styledComponents.default)(_InputCommon.Button)(_templateObject(), function (props) {
  return props.backgroundColor ? props.backgroundColor : props.theme.colors.red2;
}, function (props) {
  return props.color ? props.color : props.theme.colors.white;
});

var InputHoverPersist = function InputHoverPersist(_ref) {
  var _ref$input = _ref.input,
      value = _ref$input.value,
      onChange = _ref$input.onChange,
      name = _ref$input.name,
      input = _objectWithoutPropertiesLoose(_ref$input, ["value", "onChange", "name"]),
      _ref$meta = _ref.meta,
      error = _ref$meta.error,
      touched = _ref$meta.touched,
      id = _ref.id,
      style = _ref.style,
      icon = _ref.icon,
      disabled = _ref.disabled,
      placeholder = _ref.placeholder,
      type = _ref.type,
      backgroundColor = _ref.backgroundColor,
      asteriskText = _ref.asteriskText,
      action = _ref.action,
      button = _ref.button,
      errorMessage = _ref.errorMessage;

  return _react.default.createElement(_InputCommon.HoverContainer, {
    id: id,
    className: "input",
    style: style,
    icon: icon,
    backgroundColor: backgroundColor
  }, _react.default.createElement("label", {
    className: "" + (icon ? '' : 'noIcon')
  }, placeholder), _react.default.createElement("input", _extends({
    type: type,
    name: name,
    onChange: onChange,
    disabled: disabled,
    placeholder: placeholder
  }, input, {
    onFocus: function onFocus() {
      (0, _jquery.default)("#" + id + " label").addClass('labelFocus');
      (0, _jquery.default)("#" + id + " input").addClass('inputFocus');
      (0, _jquery.default)("#" + id + " label").removeClass('labelBlur');
      (0, _jquery.default)("#" + id + " input").removeClass('inputBlur');
    },
    onBlur: function onBlur() {
      if (value === '') {
        (0, _jquery.default)("#" + id + " label").removeClass('labelFocus');
        (0, _jquery.default)("#" + id + " input").removeClass('inputFocus');
      } else {
        (0, _jquery.default)("#" + id + " label").addClass('labelBlur');
        (0, _jquery.default)("#" + id + " input").addClass('inputBlur');
      }
    }
  })), icon && _react.default.createElement(_InputCommon.Icon, null, _react.default.createElement("img", {
    src: icon,
    alt: ""
  })), asteriskText && _react.default.createElement(_AsteriskText.default, null, asteriskText), action && _react.default.createElement(_InputCommon.Action, {
    color: action.color,
    onClick: function onClick() {
      if (action.onClick) action.onClick();
    }
  }, action.label && _react.default.createElement("span", null, action.label), action.icon && _react.default.createElement("div", null, _react.default.createElement("img", {
    src: action.icon,
    alt: "Action"
  }))), button && _react.default.createElement(StyledButton, {
    backgroundColor: button.backgroundColor,
    color: button.color,
    disabled: button.disabled || false,
    onClick: function onClick() {
      if (button.onClick) button.onClick();
    }
  }, button.label), (touched && error || errorMessage) && _react.default.createElement(_InputCommon.Error, null, _react.default.createElement(_ErrorSvg.default, null), "\xA0", error || errorMessage));
};

InputHoverPersist.propTypes = {
  input: _propTypes.PropTypes.shape(_propTypes.PropTypes.any).isRequired,
  meta: _propTypes.PropTypes.shape(_propTypes.PropTypes.any).isRequired,
  id: _propTypes.PropTypes.string,
  style: _propTypes.PropTypes.shape(_propTypes.PropTypes.any),
  disabled: _propTypes.PropTypes.bool,
  placeholder: _propTypes.PropTypes.string,
  type: _propTypes.PropTypes.string,
  icon: _propTypes.PropTypes.string,
  backgroundColor: _propTypes.PropTypes.string,
  asteriskText: _propTypes.PropTypes.string,
  errorMessage: _propTypes.PropTypes.string,
  action: {
    label: _propTypes.PropTypes.string,
    color: _propTypes.PropTypes.string,
    icon: _propTypes.PropTypes.string,
    onClick: _propTypes.PropTypes.func
  },
  button: {
    disabled: _propTypes.PropTypes.bool,
    label: _propTypes.PropTypes.string,
    backgroundColor: _propTypes.PropTypes.string,
    color: _propTypes.PropTypes.string,
    onClick: _propTypes.PropTypes.func
  }
};
InputHoverPersist.defaultProps = {
  id: "" + (0, _v.default)() + Math.random().toString(36).substring(7),
  style: null,
  disabled: false,
  placeholder: null,
  type: 'text',
  icon: null,
  backgroundColor: null,
  asteriskText: null,
  action: null,
  button: null,
  errorMessage: null
};

var _default = function _default(props) {
  return _react.default.createElement(_reduxForm.Field, _extends({
    component: InputHoverPersist
  }, props));
};

exports.default = _default;