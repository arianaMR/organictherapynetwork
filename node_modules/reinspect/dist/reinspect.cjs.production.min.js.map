{"version":3,"file":"reinspect.cjs.production.min.js","sources":["../src/context.ts","../src/useReducer.ts","../src/useState.ts","../src/StateInspector.tsx"],"sourcesContent":["import React, { Reducer } from \"react\"\nimport { Store } from \"redux\"\n\ntype UnsubscribeFn = () => void\n\nexport type EnhancedStore = Store & {\n  registerHookedReducer: (\n    reducer: Reducer<any, any>,\n    initialState: any,\n    reducerId: string | number\n  ) => UnsubscribeFn\n}\n\nexport const StateInspectorContext = React.createContext<\n  EnhancedStore | undefined\n>(undefined)\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport {\n  useReducer as useReactReducer,\n  Reducer,\n  useMemo,\n  Dispatch,\n  useState,\n  useEffect,\n  useContext,\n  ReducerState,\n  ReducerAction\n} from \"react\"\nimport { StateInspectorContext, EnhancedStore } from \"./context\"\n\nexport function useHookedReducer<S, A>(\n  reducer: Reducer<S, A>,\n  initialState: S,\n  store: EnhancedStore,\n  reducerId: string | number\n): [S, Dispatch<A>] {\n  const initialReducerState = useMemo(() => {\n    const initialStateInStore = store.getState()[reducerId]\n    return initialStateInStore === undefined\n      ? initialState\n      : initialStateInStore\n  }, [])\n\n  const [localState, setState] = useState<S>(initialReducerState)\n\n  const dispatch = useMemo<Dispatch<A>>(() => {\n    const dispatch = (action: any) => {\n      if (\n        action &&\n        typeof action === \"object\" &&\n        typeof action.type === \"string\"\n      ) {\n        store.dispatch({\n          type: `${reducerId}/${action.type}`,\n          payload: action\n        })\n      } else {\n        store.dispatch({\n          type: reducerId,\n          payload: action\n        })\n      }\n    }\n\n    return dispatch\n  }, [])\n\n  useEffect(() => {\n    const teardown = store.registerHookedReducer(\n      reducer,\n      initialReducerState,\n      reducerId\n    )\n\n    let lastReducerState = localState\n    const unsubscribe = store.subscribe(() => {\n      const storeState: any = store.getState()\n      const reducerState = storeState[reducerId]\n\n      if (lastReducerState !== reducerState) {\n        setState(reducerState)\n      }\n\n      lastReducerState = reducerState\n    })\n\n    return () => {\n      unsubscribe()\n      teardown()\n    }\n  }, [])\n\n  return [localState, dispatch]\n}\n\nexport function useReducer<R extends Reducer<any, any>>(\n  reducer: R,\n  initialState: ReducerState<R>,\n  id?: string | number\n): [ReducerState<R>, Dispatch<ReducerAction<R>>]\nexport function useReducer<R extends Reducer<any, any>, I>(\n  reducer: R,\n  initialState: I,\n  initializer: (arg: I) => ReducerState<R>,\n  id?: string | number\n): [ReducerState<R>, Dispatch<ReducerAction<R>>]\nexport function useReducer<R extends Reducer<any, any>, I>(\n  reducer: R,\n  initialState: I & ReducerState<R>,\n  initializer: (arg: I & ReducerState<R>) => ReducerState<R>,\n  id?: string | number\n): [ReducerState<R>, Dispatch<ReducerAction<R>>]\nexport function useReducer<R extends Reducer<any, any>, I>(\n  reducer: R,\n  initialState: I & ReducerState<R>,\n  ...args: any[]\n) {\n  let id: string | number | undefined\n  let initializer: (arg: I | (I & ReducerState<R>)) => ReducerState<R> = args[0]\n\n  if (args.length === 2) {\n    initializer = args[0]\n    id = args[1]\n  } else if (typeof args[0] === \"string\" || typeof args[0] === \"number\") {\n    id = args[0]\n  } else {\n    initializer = args[0]\n    id = args[1]\n  }\n\n  const store = useContext(StateInspectorContext)\n\n  const initializedState = initializer\n    ? initializer(initialState)\n    : initialState\n\n  return store && id\n    ? useHookedReducer(reducer, initializedState, store, id)\n    : useReactReducer(reducer, initialState, initializer)\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { useHookedReducer } from \"./useReducer\"\nimport { useMemo, useContext, useState as useReactState } from \"react\"\nimport { EnhancedStore, StateInspectorContext } from \"./context\"\n\ntype StateAction<S> = S | ((s: S) => S)\n\nfunction stateReducer<S>(state: S, action: StateAction<S>): S {\n  return typeof action === \"function\" ? (action as (s: S) => S)(state) : action\n}\n\nexport const useState = <S>(\n  initialState: S | (() => S),\n  id: string | number\n) => {\n  const inspectorStore = useContext(StateInspectorContext)\n  // Keeping the first values\n  const [store, reducerId] = useMemo<\n    [EnhancedStore | undefined, string | number]\n  >(() => [inspectorStore, id], [])\n\n  if (!store || !reducerId) {\n    return useReactState<S>(initialState)\n  }\n\n  const finalInitialState = useMemo<S>(\n    () =>\n      typeof initialState === \"function\"\n        ? (initialState as () => S)()\n        : initialState,\n    []\n  )\n\n  return useHookedReducer<S, any>(\n    stateReducer,\n    finalInitialState,\n    store,\n    reducerId\n  )\n}\n","import React, { ReducerAction, Reducer, useMemo, useEffect } from \"react\"\nimport { createStore } from \"redux\"\nimport { EnhancedStore, StateInspectorContext } from \"./context\"\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__?: any\n  }\n}\n\ninterface StateInspectorProps {\n  name?: string\n  initialState?: any\n}\n\ninterface StoreReducerAction {\n  type: string\n  payload: any\n}\n\nconst omit = (obj: Record<string, any>, keyToRemove: string) =>\n  Object.keys(obj)\n    .filter(key => key !== keyToRemove)\n    .reduce<Record<string, any>>((acc, key) => {\n      acc[key] = obj[key]\n\n      return acc\n    }, {})\n\nexport const StateInspector: React.FC<StateInspectorProps> = ({\n  name,\n  initialState = {},\n  children\n}) => {\n  const store = useMemo<EnhancedStore | undefined>(() => {\n    if (typeof window === \"undefined\" || !window.__REDUX_DEVTOOLS_EXTENSION__) {\n      return undefined\n    }\n\n    const registeredReducers: Record<\n      string | number,\n      Reducer<any, ReducerAction<any>>\n    > = {}\n\n    const storeReducer: Reducer<any, StoreReducerAction> = (state, action) => {\n      const actionReducerId = action.type.split(\"/\")[0]\n      const isInitAction = /\\/_init$/.test(action.type)\n      const isTeardownAction = /\\/_teardown$/.test(action.type)\n\n      const currentState = isTeardownAction\n        ? omit(state, actionReducerId)\n        : { ...state }\n\n      return Object.keys(registeredReducers).reduce((acc, reducerId) => {\n        const reducer = registeredReducers[reducerId]\n        const reducerState = state[reducerId]\n        const reducerAction = action.payload\n        const isForCurrentReducer = actionReducerId === reducerId\n\n        if (isForCurrentReducer) {\n          acc[reducerId] = isInitAction\n            ? action.payload\n            : reducer(reducerState, reducerAction)\n        } else {\n          acc[reducerId] = reducerState\n        }\n\n        return acc\n      }, currentState)\n    }\n\n    const store: EnhancedStore = createStore(\n      storeReducer,\n      initialState,\n      window.__REDUX_DEVTOOLS_EXTENSION__({\n        name: name || \"React state\",\n        actionsBlacklist: [\"/_init\", \"/_teardown\"]\n      })\n    )\n\n    store.registerHookedReducer = (reducer, initialState, reducerId) => {\n      registeredReducers[reducerId] = reducer\n\n      store.dispatch({\n        type: `${reducerId}/_init`,\n        payload: initialState\n      })\n\n      return () => {\n        delete registeredReducers[reducerId]\n\n        store.dispatch({\n          type: `${reducerId}/_teardown`\n        })\n      }\n    }\n\n    return store\n  }, [])\n\n  useEffect(() => {\n    store && store.dispatch({ type: \"REINSPECT/@@INIT\", payload: {} })\n  }, [])\n\n  return (\n    <StateInspectorContext.Provider value={store}>\n      {children}\n    </StateInspectorContext.Provider>\n  )\n}\n"],"names":["StateInspectorContext","React","createContext","undefined","useHookedReducer","reducer","initialState","store","reducerId","initialReducerState","useMemo","initialStateInStore","getState","useState","localState","setState","dispatch","action","type","payload","useEffect","teardown","registerHookedReducer","lastReducerState","unsubscribe","subscribe","reducerState","stateReducer","state","name","children","window","__REDUX_DEVTOOLS_EXTENSION__","registeredReducers","createStore","obj","keyToRemove","actionReducerId","split","isInitAction","test","currentState","Object","keys","filter","key","reduce","acc","actionsBlacklist","Provider","value","id","initializer","useContext","initializedState","useReactReducer","inspectorStore","useReactState"],"mappings":"sXAaO,IAAMA,EAAwBC,EAAMC,mBAEzCC,GCdF,SAagBC,EACdC,EACAC,EACAC,EACAC,OAEMC,EAAsBC,WAAQ,eAC5BC,EAAsBJ,EAAMK,WAAWJ,eACdL,IAAxBQ,EACHL,EACAK,IACH,MAE4BE,WAAYJ,GAApCK,OAAYC,OAEbC,EAAWN,WAAqB,kBACnB,SAACO,GAMdV,EAAMS,SAJNC,GACkB,iBAAXA,GACgB,iBAAhBA,EAAOC,KAEC,CACbA,KAASV,MAAaS,EAAOC,KAC7BC,QAASF,GAGI,CACbC,KAAMV,EACNW,QAASF,OAMd,WAEHG,aAAU,eACFC,EAAWd,EAAMe,sBACrBjB,EACAI,EACAD,GAGEe,EAAmBT,EACjBU,EAAcjB,EAAMkB,WAAU,eAE5BC,EADkBnB,EAAMK,WACEJ,GAE5Be,IAAqBG,GACvBX,EAASW,GAGXH,EAAmBG,YAGd,WACLF,IACAH,OAED,IAEI,CAACP,EAAYE,GCrEtB,SAASW,EAAgBC,EAAUX,SACR,mBAAXA,EAAyBA,EAAuBW,GAASX,yBCqBZ,gBAC3DY,IAAAA,SACAvB,aAAAA,aAAe,KACfwB,IAAAA,SAEMvB,EAAQG,WAAmC,cACzB,oBAAXqB,QAA2BA,OAAOC,kCAIvCC,EAGF,GA6BE1B,EAAuB2B,eA3B0B,SAACN,EAAOX,OAxBrDkB,EAA0BC,EAyB5BC,EAAkBpB,EAAOC,KAAKoB,MAAM,KAAK,GACzCC,EAAe,WAAWC,KAAKvB,EAAOC,MAGtCuB,EAFmB,eAAeD,KAAKvB,EAAOC,OA3B5CiB,EA8BCP,EA9ByBQ,EA8BlBC,EA7BpBK,OAAOC,KAAKR,GACTS,QAAO,SAAAC,UAAOA,IAAQT,KACtBU,QAA4B,SAACC,EAAKF,UACjCE,EAAIF,GAAOV,EAAIU,GAERE,IACN,UAwBQnB,UAEFc,OAAOC,KAAKV,GAAoBa,QAAO,SAACC,EAAKvC,OAE5CkB,EAAeE,EAAMpB,UAKzBuC,EAAIvC,GAHsB6B,IAAoB7B,EAG7B+B,EACbtB,EAAOE,SACPd,EARU4B,EAAmBzB,IAQrBkB,EANQT,EAAOE,SAQVO,EAGZqB,IACNN,KAKHnC,EACAyB,OAAOC,6BAA6B,CAClCH,KAAMA,GAAQ,cACdmB,iBAAkB,CAAC,SAAU,wBAIjCzC,EAAMe,sBAAwB,SAACjB,EAASC,EAAcE,UACpDyB,EAAmBzB,GAAaH,EAEhCE,EAAMS,SAAS,CACbE,KAASV,WACTW,QAASb,IAGJ,kBACE2B,EAAmBzB,GAE1BD,EAAMS,SAAS,CACbE,KAASV,mBAKRD,KACN,WAEHa,aAAU,WACRb,GAASA,EAAMS,SAAS,CAAEE,KAAM,mBAAoBC,QAAS,OAC5D,IAGDlB,gBAACD,EAAsBiD,UAASC,MAAO3C,GACpCuB,gCFTLzB,EACAC,OAGI6C,EACAC,0CAEgB,+CAClBA,0CACAD,2CAC4B,2DAA+B,0DAC3DA,2CAEAC,0CACAD,+CAGI5C,EAAQ8C,aAAWrD,GAEnBsD,EAAmBF,EACrBA,EAAY9C,GACZA,SAEGC,GAAS4C,EACZ/C,EAAiBC,EAASiD,EAAkB/C,EAAO4C,GACnDI,aAAgBlD,EAASC,EAAc8C,qBC/GrB,SACtB9C,EACA6C,OAEMK,EAAiBH,aAAWrD,KAEPU,WAEzB,iBAAM,CAAC8C,EAAgBL,KAAK,IAFvB5C,OAAOC,cAITD,GAAUC,EAYRJ,EACLuB,EATwBjB,WACxB,iBAC0B,mBAAjBJ,EACFA,IACDA,IACN,IAMAC,EACAC,GAfOiD,WAAiBnD"}